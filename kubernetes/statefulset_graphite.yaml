apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: graphite
  namespace: graphite
  labels:
    app.kubernetes.io/instance: graphite
    app.kubernetes.io/name: graphite
    workload.user.cattle.io/workloadselector: statefulSet-graphite-graphite
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: statefulSet-graphite-graphite
  serviceName: graphite
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: graphite
        app.kubernetes.io/name: graphite
        workload.user.cattle.io/workloadselector: statefulSet-graphite-graphite
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                  - key: node
                    operator: In
                    values:
                      - n1
              weight: 100
      imagePullSecrets:
        - name: dockerconfigjson-github-com
      containers:
        - envFrom:
            - secretRef:
                name: graphite
                optional: false
          name: graphite
          image: ghcr.io/gdha/graphite:v1.3
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics/find?query=*
              port: liveness-port
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 2
          ports:
            - containerPort: 2003
              #hostPort: 2003
              name: carbon
              protocol: TCP
            - containerPort: 80
              name: liveness-port
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics/find?query=*
              port: liveness-port
            periodSeconds: 2
            successThreshold: 2
            timeoutSeconds: 2
          startupProbe:
            failureThreshold: 30
            httpGet:
              path: /metrics/find?query=*
              port: liveness-port
            periodSeconds: 10
          resources:
            requests:
              memory: 400Mi
            limits:
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: true
            capabilities: {}
            privileged: true
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          stdin: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          tty: true
          volumeMounts:
            - mountPath: /var/log
              name: bind-mount--logs
            - mountPath: /var/run/secrets
              name: graphite-secrets
            - mountPath: /opt/graphite/storage
              name: graphite-storage
      dnsConfig: {}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - hostPath:
            path: /app/util/graphite/logs
            type: DirectoryOrCreate
          name: bind-mount--logs
        - name: graphite-secrets
          secret:
            defaultMode: 256
            optional: false
            secretName: graphite
        - name: graphite-storage
          persistentVolumeClaim:
            claimName: graphite
  updateStrategy:
    type: RollingUpdate
